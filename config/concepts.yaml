concepts:
  - name: site
    related_concepts: [network, link, platform]
    description: |
      A _site_ is a place on the network where workloads are running.
      Sites are linked to form application networks.

      Sites operate on multiple platforms.  One site corresponds to
      one namespace in a platform instance.  Sites can be added to a
      network and removed from a network dynamically.

      Each site has a Skupper router which is responsible for
      communicating with the local workloads and forwarding traffic to
      routers in remote sites.

      <figure>
        <img src="images/site-1.svg"/>
        <figcaption>A site with three workloads</figcaption>
      </figure>

      <figure>
        <img src="images/site-2.svg"/>
        <figcaption>Two sites linked to form a network</figcaption>
      </figure>

      <figure>
        <img src="images/site-3.svg"/>
        <figcaption>A network with sites on three different
        platforms</figcaption>
      </figure>
  - name: network
    related_concepts: [site, link]
    description: |
      A _network_ is a set of linked sites. A Skupper network is also
      known as an _application network_ or _virtual application
      network_ (VAN).

      Each network is meant for one distributed application.  This
      provides isolation from other applications and networks.

      <figure>
        <img src="images/network-1.svg"/>
        <figcaption>A simple two-site network</figcaption>
      </figure>

      <figure>
        <img src="images/network-2.svg"/>
        <figcaption>A larger network</figcaption>
      </figure>
  - name: platform
    related_concepts: [site]
    description: |
      A _platform_ is a system for running workloads.  A platform
      hosts sites.  Skupper supports Kubernetes, Docker, Podman, and
      Linux.

      Platforms provide namespaces for related workloads and
      resources.  Skupper uses namespaces to host multiple independent
      sites on one instance of a platform.

      <figure>
        <img src="images/platform-1.svg"/>
        <figcaption>A simple network with sites on two different
        platforms</figcaption>
      </figure>

      <figure>
        <img src="images/platform-2.svg"/>
        <figcaption>A platform with three namespaces, two of which
        host Skupper sites</figcaption>
      </figure>
  - name: link
    related_concepts: [network, site, "access token"]
    description: |
      A _link_ is a channel for communication between sites.  Links
      serve as a transport for application connections and requests.
      A set of linked sites constitutes a network.

      To create a link to a remote site, the remote site must provide
      _link access_.  A link access is an external access point for
      accepting links.

      Application connections and requests flow across links in both
      directions.  A linked site can communicate with any other site
      in the network of sites, even if it is not linked directly.

      Links are encrypted and authenticated using mutual TLS.  You can
      use access tokens to create links.

      <figure>
        <img src="images/link-1.svg"/>
        <figcaption>A link joining two sites to create a simple network</figcaption>
      </figure>

      <figure>
        <img src="images/link-2.svg"/>
        <figcaption>A site with two links, to two remote sites</figcaption>
      </figure>

      <figure>
        <img src="images/link-3.svg"/>
        <figcaption>A larger network with links to a central hub site</figcaption>
      </figure>
  - name: access token
    related_concepts: [link]
    related_resources: [AccessGrant, AccessToken]
    related_commands: [token]
    description: |
      An _access token_ is a short-lived credential used to create a
      link.  An access token contains the URL and secret code of a
      corresponding access grant.

      A site wishing to accept a link (the accepting site) creates an
      access grant.  It uses the access grant to create a
      corresponding access token and transfers it to a remote site (it
      _issues_ a token).  The remote site submits the access token to
      the accepting site (it _redeems_ the token).  If the token is
      valid, the accepting site sends the remote site the TLS
      credentials and connection endpoints required to create a link
      to the accepting site.

      Access tokens have limited redemptions and limited lifespans.
      By default, they can be redeemed only once, and they expire 15
      minutes after being issued.  You can set custom limits by
      configuring the access grant.

      <figure>
        <img src="images/access-token-1.svg"/>
        <figcaption>An access grant and corresponding access token</figcaption>
      </figure>

      <figure>
        <img src="images/access-token-2.svg"/>
        <figcaption>The sequence for issuing and redeeming access tokens</figcaption>
      </figure>
  - name: service
    related_concepts: [listener, connector]
    description: |
      A _service_ is an application component exposed on the network.

      <figure>
        <img src="images/service-1.svg"/>
        <figcaption>A client and server communicating across sites
        using a matched listener and connector</figcaption>
      </figure>

      <figure>
        <img src="images/service-2.svg"/>
        <figcaption>A service exposed on two sites</figcaption>
      </figure>

      <figure>
        <img src="images/service-3.svg"/>
        <figcaption>A service bound to workloads on two
        sites</figcaption>
      </figure>
    overview: |
      - XXX at the network level
      - XXX a listener and a connector bound together by a routing key
  - name: listener
    related_concepts: [connector, "routing key"]
    description: |
      A _listener_ binds a local connection endpoint to connectors in
      remote sites.

      <figure>
        <img src="images/listener-1.svg"/>
        <figcaption>A listener with multiple clients connecting
        through it</figcaption>
      </figure>
    overview: |
      - Local workloads can connect to the listener
  - name: connector
    related_concepts: [listener, "routing key"]
    description: |
      A _connector_ binds a local workload to listeners in remote
      sites.

      <figure>
        <img src="images/connector-1.svg"/>
        <figcaption>A connector bound to a set of servers</figcaption>
      </figure>
    overview: |
      - A connector targets a workload in the local site (or
        reachable on the local network).
      - A connector forwards connections from matching listeners
        at remote sites to the workload in the local site.
  - name: routing key
    related_concepts: [listener, connector]
    description: |
      A _routing key_ is an identifier for matching listeners and
      connectors.

      <figure>
        <img src="images/routing-key-model.svg"/>
        <figcaption>Each routing key has zero or more listeners and
        zero or more connectors</figcaption>
      </figure>

      <figure>
        <img src="images/routing-key-1.svg"/>
        <figcaption>A routing key with two listeners and two
        connectors</figcaption>
      </figure>
    overview: |
      - A service is truly exposed when there is at least one listener
        and one connector, matched by routing key.
  - name: attached connector
    related_concepts: [connector]
    related_resources: [AttachedConnector, AttachedConnectorAnchor]
    description: |
      An _attached connector_ is a connector in a peer namespace.

      <figure>
        <img src="images/attached-connector-1.svg"/>
        <figcaption>XXX</figcaption>
      </figure>
groups:
  - name: Sites and networks
    concepts:
      - site
      - network
      - platform
  - name: Site linking
    concepts:
      - link
      - access token
  - name: Service exposure
    concepts:
      - listener
      - connector
      - routing key
      - attached connector
