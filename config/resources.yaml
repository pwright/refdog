standard_properties:
  - name: name
    type: string
    required: true
    description: |
      The name of the resource.
  - name: namespace
    type: string
    description: |
      The namespace of the resource.
    links:
      - name: Kubernetes namespaces
        url: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  - name: options
    type: object
    description: |
      XXX
  - name: status
    description: |
      The current state of the resource.
  - name: active
    description: |
      This thing is working.
groups:
  - name: Sites
    resources:
      - name: Site
        related_concepts: [network]
        related_resources: [Link]
        description: |
          @concept_description@

          There can be only one site resource per namespace.
        examples:
          - description: A minimal site
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Site
              metadata:
                name: east
                namespace: hello-world-east
          - description: A site configured to accept links
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Site
              metadata:
                name: west
                namespace: hello-world-west
              spec:
                linkAccess: default
        metadata:
          inherit_standard_properties: [name, namespace]
          properties:
            - name: name
              description: |
                The name of the site.
        spec:
          inherit_standard_properties: [options]
          properties:
            - name: linkAccess
              default: none
              description: |
                Configure external access for links from remote sites.
              choices:
                - name: none
                  description: No linking to this site is permitted.
                - name: default
                  description: |
                    Use the default link access.  On OpenShift, the
                    default is `route`.  For other Kubernetes flavors,
                    the default is `loadbalancer`.
                - name: route
                  description: Use an OpenShift route.  _OpenShift only._
                - name: loadbalancer
                  description: Use a Kubernetes load balancer.  _Kubernetes only._
              links:
                - name: Link access concept
                  url: /concepts/link-access.html
                - name: Kubernetes load balancer services
                  url: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
            - name: serviceAccount
              default: skupper:skupper-controller
              platforms: [Kubernetes]
              description: |
                The Kubernetes service account under which to run the
                Skupper controller.
              links:
                - name: Kubernetes service accounts
                  url: https://kubernetes.io/docs/concepts/security/service-accounts/
        status:
          inherit_standard_properties: [status]
          properties:
            - name: endpoints
              hidden: true
            - name: sitesInNetwork
              hidden: true
            - name: servicesInNetwork
              hidden: true
            - name: network
              hidden: true
  - name: Site linking
    resources:
      - name: Link
        related_resources: [Grant, Claim]
        description: |
          @concept_description@

          Links are not usually created directly.  Instead, you
          typically use an access token to obtain a link.
        metadata:
          inherit_standard_properties: [name, namespace]
        spec:
          inherit_standard_properties: [options]
          properties:
            - name: tlsCredentials
              rename: tlsSecret
              description: |
                The name of a Kubernetes secret containing TLS
                credentials. The secret contains the trusted server
                certificate (typically a CA).

                It can optionally include a client certificate and key for
                mutual TLS.
              links:
                - name: Custom certificates
                  url: ""
            - name: cost
              default: 1
              description: |
                The configured "expense" of sending traffic over the
                link.
              links:
                - name: Load balancing
                  url: ""
            - name: interRouter
              hidden: true
            - name: edge
              hidden: true
            - name: noClientAuth
              hidden: true
        status:
          inherit_standard_properties: [status]
          properties:
            - name: configured
            - name: url
            - name: site
              notes: |
                Is this a site name?  Ambiguous.
      - name: Grant
        rename: AccessGrant
        related_resources: [Claim]
        related_commands: ["token issue"]
        description: |
          @concept_description@

          The `code`, `url`, and `ca` properties of the resource
          status are used to generate access tokens from the grant.
        metadata:
          inherit_standard_properties: [name, namespace]
        spec:
          inherit_standard_properties: [options]
          properties:
            - name: claims
              rename: redemptionsAllowed
              description: |
                The number of times an access token for this grant can
                be redeemed.
              default: 1
            - name: validFor
              rename: expirationWindow
              description: |
                The period of time in which an access token for this
                grant can be redeemed.
              default: 15m
            - name: secret
              rename: code
              description: |
                The secret code used to authenticate access tokens
                submitted for redemption.

                If not set, a value for the code field in the status is
                generated.
        status:
          inherit_standard_properties: [status]
          properties:
            - name: claimed
              rename: redemptions
              description: |
                The number of times a token for this grant has been
                redeemed.
            - name: expiration
              rename: expirationTime
              description: |
                The point in time when the grant expires.
              notes: |
                expirationTime seems to be the most conventional name.
            - name: secret
              rename: code
              description: |
                The secret code used to authenticate access tokens
                submitted for redemption.
              default: _Generated_
            - name: url
              description: |
                The URL of the token-redemption service for this grant.
            - name: ca
              description: |
                The trusted server certificate of the token-redemption
                service for this grant.
      - name: Claim
        rename: AccessToken
        links:
          - name: token redeem command
            url: /commands/token-redeem.html
          - name: AccessGrant resource
            url: /resources/grant.html
        description: |
          @concept_description@
        metadata:
          inherit_standard_properties: [name, namespace]
        spec:
          inherit_standard_properties: [options]
          properties:
            - name: url
              description: |
                The URL of the token redemption service at the remote
                site.
            - name: ca
              description: |
                The trusted server certificate of the token redemption
                service at the remote site.
            - name: secret
              rename: code
              description: |
                The secret code used to authenticate the token when
                submitted for redemption.
        status:
          inherit_standard_properties: [status]
          properties:
            - name: claimed
              rename: redeemed
              description: |
                True if the token has been redeemed.
  - name: Service exposure
    resources:
      - name: Connector
        related_resources: [Listener]
        description: |
          @concept_description@

          Each site can have multiple connector resources.
        examples:
          - description: |
              A connector in site East for the Hello World backend service
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Connector
              metadata:
                name: backend
                namespace: hello-world-east
              spec:
                routingKey: backend
                port: 8080
                selector: app=backend
        metadata:
          inherit_standard_properties: [name, namespace]
        spec:
          inherit_standard_properties: [options]
          properties:
            - name: routingKey
              description: |
                The identifier used to route traffic from listeners to
                connectors.  To expose a local workload to a remote
                site, the remote listener and the local connector must
                have matching routing keys.
              links:
                - name: Routing key concept
                  url: /concepts/routing-key.html
            - name: port
              description: |
                The port on the target workload to forward traffic to.
            - name: selector
              description: |
                A Kubernetes label selector for specifying target server
                pods.

                On Kubernetes, you usually want to use this.  As an
                alternative, you can use `host`.
              platforms: [Kubernetes]
              links:
                - name: Kubernetes label selectors
                  url: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
                - name: Kubernetes pods
                  url: https://kubernetes.io/docs/concepts/workloads/pods/
            - name: host
              description: |
                The hostname or IP address of the server.  This is an
                alternative to `selector` for specifying the target
                server.
            - name: tlsCredentials
              rename: tlsSecret
              description: |
                The name of a Kubernetes secret containing the trusted
                server certificate (typically a CA).

                It can optionally include a client certificate and key for
                mutual TLS.

                This option is used when setting up client-to-router TLS
                encryption.
              links:
                - name: Site-scoped TLS
                  url: "" # XXX
            - name: includeNotReady
              description: |
                If set, include server pods that are not in the ready
                state.
              platforms: [Kubernetes]
            - name: type
              default: tcp
              description: |
                The connector type.
        status:
          inherit_standard_properties: [status]
      - name: Listener
        related_resources: [Connector]
        description: |
          @concept_description@

          Each site can have multiple listener definitions.
        examples:
          - description: |
              A listener in site West for the Hello World backend service
              in site East
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Listener
              metadata:
                name: backend
                namespace: hello-world-west
              spec:
                routingKey: backend
                port: 8080
                host: backend
        metadata:
          inherit_standard_properties: [name, namespace]
        spec:
          inherit_standard_properties: [options]
          properties:
            - name: routingKey
              description: |
                The identifier used to route traffic from listeners to
                connectors.  To enable connecting to a service at a
                remote site, the local listener and the remote connector
                must have matching routing keys.
              links:
                - name: Routing key concept
                  url: /concepts/routing-key.html
            - name: host
              description: |
                The hostname or IP address of the local listener.  Clients
                at this site use the listener host and port to
                establish connections to the remote service.
            - name: port
              description: |
                The port of the local listener.  Clients at this site use
                the listener host and port to establish connections to
                the remote service.
            - name: tlsCredentials
              rename: tlsSecret
              description: |
                The name of a Kubernetes secret containing TLS
                credentials.  The secret contains the trusted server
                certificate (typically a CA).

                It can optionally include a client certificate and key for
                mutual TLS.

                This option is used when setting up router-to-server TLS
                encryption.
              links:
                - name: Site-scoped TLS
                  url: "" # XXX
            - name: type
              default: tcp
              description: |
                The listener type.
        status:
          inherit_standard_properties: [status]
  # - name: Advanced stuff
  #   resources:
  #     - name: LinkAccess
  #       rename: RouterAccess
  #       description: |
  #         A point of external access for links from remote sites.  A
  #         LinkAccess configures the router to accept inter-router
  #         links and creates the Kubernetes resources for external
  #         access.
  #       spec_properties:
  #         - name: roles
  #         - name: tlsCredentials
  #           rename: tlsSecret
  #           description: |
  #             The name of a Kubernetes secret containing the trusted
  #             server certificate (typically a CA).

  #             It can optionally include a client certificate and key for
  #             mutual TLS.
  #         - name: ca
  #           description: |
  #             The name of a Kubernetes secret containing a CA for
  #             generating TLS credentials.  If the `tlsCredentials`
  #             property is not set, the controller uses `ca` to
  #             generate them.
  #           notes: |
  #             Consider tlsCA.  And "ca" often means "this is what I trust".  This thing has a different meaning.
  #         - name: bindHost
  #         - name: subjectAlternativeNames
  #         - name: options
  #         - name: accessType
