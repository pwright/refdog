groups:
  - title: Site configuration
    resources:
      - name: Site
        description: |
          A [site][site] is a place where components of your application are
          running.  Sites are linked to form application
          [networks][network].

          There can be only one site definition per namespace.

          [site]: concepts.html#site
          [network]: concepts.html#network
        examples:
          - description: A minimal site definition
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Site
              metadata:
                name: east
                namespace: hello-world-east
        properties:
          - name: enableLinkAccess
            type: boolean
            description: |
              Enable external access for links from remote sites.
          - name: linkAccessType
            type: string
            description: |
              Select the means of opening external access.
            default: |
              `route` if the environment is OpenShift, otherwise
              `loadbalancer`
            choices: [route, loadbalancer, nodeport, ingress]
          - name: linkAccessHost
            type: string
            description: |
              The host or IP address at which to expose link access.
          - name: serviceAccount
  - title: Site linking
    resources:
      - name: Link
        description: |
          A [link][link] is a site-to-site communication channel. Links
          serve as a transport for application connections and requests.

          [link]: concepts.html#link
        examples:
          - description: A typical link definition
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Link
              metadata:
                name: link-to-west
                namespace: hello-world-east
              spec:
                [...]
        properties:
          - name: tlsCredentials
            description: |
              The name of a Kubernetes secret containing TLS
              credentials. The secret contains the trusted server
              certificate (typically a CA certificate).

              It can optionally include a client certificate and key for
              mutual TLS.
          - name: cost
      - name: LinkAccess
        description: |
          A [link access][link-access] defines a point of external access
          for links from remote sites.

          XXX

          LinkAccess is specifically about configuring and providing
          access to router Listeners.

          LinkAccess is a way of configuring and exposing router listeners.

          A LinkAccess will be implemented in part by the controller
          creating an underlying SecuredAccess object, but LinkAccess will
          also cause the router config to be adjusted.

          [link-access]: XXX
        examples:
          - description: A typical link access definition
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: LinkAccess
              metadata:
                name: skupper-router
              spec:
                roles:
                - role: inter-router
                  port: 55671
                - role: edge
                  port: 45671
                accessType: loadbalancer
                tlsCredentials: skupper-site-server
        properties:
          - name: tlsCredentials
            description: |
              The name of a Kubernetes secret containing TLS
              credentials. The secret contains the trusted server
              certificate (typically a CA certificate).

              It can optionally include a client certificate and key for
              mutual TLS.
          - name: ca
            description: |
              XXX

              A reference to a secret.

              Why have this when tlsCredentials has a CA?  The CA is only
              needed if you want the controller to generate the
              tlsCredentials for you, and must then refer to a secret
              containing the private key of the CA as well as its
              certificate.

              So ca and tlsCredentials are alternatives.

              If the CA is supplied in a LinkAccess, it is assumed it
              exists already (for the current mode of certificate
              management).
          - name: accessType
            description: |
              accessType is a hint or constraint on the kind of ingress
              that can/should be used (route, nodePort, LB, nginx, etc.).
      - name: Grant
        description: |
          XXX

          Grant is the offering of access.

          It is the 'server side' of a Claim.

          A Grant is essentially a way to declare that someone with the
          given secret can present that in exchange for a certificate
          signed by the ca associated with the grant, up to the given
          expiration and for the number of allowed claims.

          Then, on the site you want to use that, you create a Claim.
        properties:
          - name: validFor
          - name: claims
      - name: Claim
        description: |
          XXX

          The Claim declares desire to initiate access based on a previous
          Grant.

          Does "claim" mean something more than an asserted grant?  That
          is essentially what it is.

          The Claim url is obtained from the status of the grant along
          with the secret and the ca, i.e. the information for a Claim
          comes from the Grant.

          The Claim has the details from its associated Grant.
  - title: Service exposure
    resources:
      - name: Connector
        description: |
          A [connector][connector] binds local servers to listeners in
          remote sites.

          Each namespace can contain multiple connector definitions.

          [connector]: concepts.html#connector
        examples:
          - description: |
              A connector in site East for the Hello World backend service
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Connector
              metadata:
                name: backend
                namespace: hello-world-east
              spec:
                routingKey: backend
                port: 8080
                selector: app=backend
        properties:
          - name: routingKey
            description: |
              The identifier used to route traffic from listeners to
              connectors.  To connect to a service at a remote site, the
              listener and connector must have matching routing keys.
          - name: selector
            description: |
              A Kubernetes [label selector][selector] for targeting server
              pods.

              [selector]: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
          - name: host
            description: |
              The hostname or IP address of the server.  This is an
              alternative to `selector` for specifying the target
              server.
          - name: port
            description: |
              The port number of the server listener.
          - name: enableTLS
            type: boolean
            description: |
              Use TLS to encrypt communication between the router and servers.

              By default, the TLS credentials are generated and stored in
              a secret at XXX.
          - name: tlsCredentials
            description: |
              The name of a Kubernetes secret containing TLS
              credentials.  The secret contains the trusted server
              certificate (typically a CA certificate).

              It can optionally include a client certificate and key for
              mutual TLS.
          - name: type
            notes: |
              What is this again?  I think we need a qualifier on "type".
          - name: includeNotReady
      - name: Listener
        description: |
          A [listener][listener] is a local connection endpoint bound to
          servers in remote sites.

          Each namespace can contain multiple listener definitions.

          [listener]: concepts.html#listener
        examples:
          - description: |
              A listener in site West for the Hello World backend service
              in site East
            yaml: |
              apiVersion: skupper.io/v1alpha1
              kind: Listener
              metadata:
                name: backend
                namespace: hello-world-west
              spec:
                routingKey: backend
                port: 8080
                host: backend
        properties:
          - name: routingKey
            description: |
              The identifier used to route traffic from listeners to
              connectors.  To connect to a service at a remote site, the
              listener and connector must have matching routing keys.
          - name: host
            description: |
              The hostname or IP address of the local listener.  Clients
              at this site use the listener host and port to
              establish connections to the remote service.
          - name: port
            description: |
              The port of the local listener.  Clients at this site use
              the listener host and port to establish connections to
              the remote service.
          - name: enableTLS
            type: boolean
            description: |
              Use TLS to encrypt communication between clients and the router.

              By default, the TLS credentials are generated and stored in
              a secret at XXX.
          - name: tlsCredentials
            description: |
              The name of a Kubernetes secret containing TLS
              credentials.  The secret contains the server certificate
              and key.

              It can optionally include a client certificate for mutual
              TLS.
          - name: type
            notes: |
              What is this again?  I think we need a qualifier on "type".
  - title: Internal
    resources:
      - name: SecuredAccess
        description: |
          XXX

          SecuredAccess is a generic way of exposing a workload (a set of
          pods).

          SecuredAccess just creates and necessary service/ingress
          resources and optionally any secrets with tls credentials.

          The implementation of LinkAccess creates a SecuredAccess and
          also configures the router.

          SecuredAccess is a lower level concept.  It just exposes a
          workload, including if desired, generation of necessary certs
          (though those can also be provided if preferred).

          SecuredAccess is not in any way tied to the router.  LInkAccess
          *is* tied to the router.  LinkAccess can be thought of as a
          specialization of SecuredAccess.
