properties:
  metadata/name:
    name: name
    type: string
    required: true
    description: |
      The name of the resource.
    links:
      - name: Kubernetes object names
        url: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/
  metadata/namespace:
    name: namespace
    type: string
    description: |
      The namespace of the resource.
    links:
      - name: Kubernetes namespaces
        url: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
  options:
    name: options
    type: object
    description: |
      Additional settings.
  status/status:
    name: status
    description: |
      The current state of the resource.
  status/active:
    name: active
    description: |
      This thing is working.
resources:
  - name: Site
    related_concepts: [network, namespace]
    related_resources: [Link]
    description: |
      A place where components of your application are running.
      Sites are linked to form application networks.

      There can be only one site resource per namespace.
    examples:
      - description: A minimal site
        yaml: |
          apiVersion: skupper.io/v1alpha1
          kind: Site
          metadata:
            name: east
            namespace: hello-world-east
      - description: A site configured to accept links
        yaml: |
          apiVersion: skupper.io/v1alpha1
          kind: Site
          metadata:
            name: west
            namespace: hello-world-west
          spec:
            linkAccess: default
    metadata:
      inherit_properties: [metadata/*]
      properties:
        - name: name
    spec:
      inherit_properties: [options]
      properties:
        - name: linkAccess
          default: none
          description: |
            Configure external access for links from remote sites.
          choices:
            - name: none
              description: No linking to this site is permitted.
            - name: default
              description: |
                Use the default link access.  On OpenShift, the
                default is `route`.  For other Kubernetes flavors,
                the default is `loadbalancer`.
            - name: route
              description: Use an OpenShift route.  _OpenShift only._
            - name: loadbalancer
              description: Use a Kubernetes load balancer.  _Kubernetes only._
          links:
            - name: Link access concept
              url: /concepts/link-access.html
            - name: Kubernetes load balancer services
              url: https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
        - name: serviceAccount
          default: skupper-router
          platforms: [Kubernetes]
          description: |
            The Kubernetes service account under which to run the
            Skupper controller.
          links:
            - name: Kubernetes service accounts
              url: https://kubernetes.io/docs/concepts/security/service-accounts/
        - name: ha
        - name: routerMode
        - name: defaultIssuer
    status:
      inherit_properties: [status, active]
      properties:
        - name: endpoints
        - name: sitesInNetwork
        - name: servicesInNetwork
        - name: network
        - name: defaultIssuer
  - name: Link
    related_resources: [AccessGrant, AccessToken]
    description: |
      A site-to-site communication channel. Links serve as a
      transport for application connections and requests.  A set
      of linked sites constitute a network.

      Links are not usually created directly.  Instead, you
      typically use an access token to obtain a link.
    metadata:
      inherit_properties: [metadata/*]
    spec:
      inherit_properties: [options]
      properties:
        - name: tlsCredentials
          description: |
            The name of a Kubernetes secret containing TLS
            credentials. The secret contains the trusted server
            certificate (typically a CA).

            It can optionally include a client certificate and key for
            mutual TLS.
          links:
            - name: Custom certificates
              url: ""
        - name: cost
          default: 1
          description: |
            The configured routing cost of sending traffic over
            the link.
          links:
            - name: Load balancing
              url: ""
        - name: endpoints
        - name: noClientAuth
          hidden: true
    status:
      inherit_properties: [status/*]
      properties:
        - name: configured
  - name: AccessGrant
    related_resources: [AccessToken]
    related_commands: [token/issue]
    description: |
      Permission to redeem access tokens for links to the local
      site.  A remote site can use a token containing the grant
      URL and secret code to obtain a certificate signed by the
      grant's certificate authority (CA), within a certain
      expiration window and for a limited number of redemptions.

      The `code`, `url`, and `ca` properties of the resource
      status are used to generate access tokens from the grant.
    metadata:
      inherit_properties: [metadata/*]
    spec:
      inherit_properties: [options]
      properties:
        - name: redemptionsAllowed
          description: |
            The number of times an access token for this grant can
            be redeemed.
          default: 1
        - name: expirationWindow
          description: |
            The period of time in which an access token for this
            grant can be redeemed.
          default: 15m
        - name: code
          description: |
            The secret code used to authenticate access tokens
            submitted for redemption.

            If not set, a value for the code field in the status is
            generated.
        - name: issuer
          notes: |
            What is this?
    status:
      inherit_properties: [status/status]
      properties:
        - name: redeemed
          description: |
            The number of times a token for this grant has been
            redeemed.
          notes: |
            Suggest "redemptions" instead, to match
            "redemptionsAllowed" and avoid the impression that
            it's a boolean.
        - name: expiration
          description: |
            The point in time when the grant expires.
          notes: |
            Suggest "expirationTime" instead.  It seems to be the
            most conventional name.
        - name: url
          description: |
            The URL of the token-redemption service for this grant.
        - name: ca
          description: |
            The trusted server certificate of the token-redemption
            service for this grant.
        - name: code
          description: |
            The secret code used to authenticate access tokens
            submitted for redemption.
          default: _Generated_
  - name: AccessToken
    related_resources: [AccessGrant]
    related_commands: [token/redeem]
    description: |
      A transferrable token redeemable for a link to a remote
      site.  An access token contains the URL and secret code of a
      corresponding access grant.
    metadata:
      inherit_properties: [metadata/*]
    spec:
      inherit_properties: [options]
      properties:
        - name: url
          description: |
            The URL of the token redemption service at the remote
            site.
        - name: ca
          description: |
            The trusted server certificate of the token redemption
            service at the remote site.
        - name: code
          description: |
            The secret code used to authenticate the token when
            submitted for redemption.
    status:
      inherit_properties: [status]
      properties:
        - name: redeemed
          description: |
            True if the token has been redeemed.
  - name: Connector
    related_resources: [Listener]
    description: |
      Binds target workloads in the local site to listeners in
      remote sites.

      Each site can have multiple connector resources.
    examples:
      - description: |
          A connector in site East for the Hello World backend service
        yaml: |
          apiVersion: skupper.io/v1alpha1
          kind: Connector
          metadata:
            name: backend
            namespace: hello-world-east
          spec:
            routingKey: backend
            port: 8080
            selector: app=backend
    metadata:
      inherit_properties: [metadata/*]
    spec:
      inherit_properties: [options]
      properties:
        - name: routingKey
          description: |
            The identifier used to route traffic from listeners to
            connectors.  To expose a local workload to a remote
            site, the remote listener and the local connector must
            have matching routing keys.
          links:
            - name: Routing key concept
              url: /concepts/routing-key.html
        - name: port
          description: |
            The port on the target workload to forward traffic to.
        - name: selector
          description: |
            A Kubernetes label selector for specifying target server
            pods.

            On Kubernetes, you usually want to use this.  As an
            alternative, you can use `host`.
          platforms: [Kubernetes]
          links:
            - name: Kubernetes label selectors
              url: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            - name: Kubernetes pods
              url: https://kubernetes.io/docs/concepts/workloads/pods/
        - name: host
          description: |
            The hostname or IP address of the server.  This is an
            alternative to `selector` for specifying the target
            server.
        - name: tlsCredentials
          description: |
            The name of a Kubernetes secret containing the trusted
            server certificate (typically a CA).

            It can optionally include a client certificate and key for
            mutual TLS.

            This option is used when setting up client-to-router TLS
            encryption.
          links:
            - name: Site-scoped TLS
              url: "" # XXX
        - name: includeNotReady
          description: |
            If set, include server pods that are not in the ready
            state.
          platforms: [Kubernetes]
          links:
            - name: Kubernetes pod lifecycle
              url: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/
        - name: type
          default: tcp
          description: |
            The connector type.
    status:
      inherit_properties: [status/*]
  - name: Listener
    related_resources: [Connector]
    description: |
      Binds a connection endpoint in the local site to target
      workloads in remote sites.

      Each site can have multiple listener definitions.
    examples:
      - description: |
          A listener in site West for the Hello World backend service
          in site East
        yaml: |
          apiVersion: skupper.io/v1alpha1
          kind: Listener
          metadata:
            name: backend
            namespace: hello-world-west
          spec:
            routingKey: backend
            port: 8080
            host: backend
    metadata:
      inherit_properties: [metadata/*]
    spec:
      inherit_properties: [options]
      properties:
        - name: routingKey
          description: |
            The identifier used to route traffic from listeners to
            connectors.  To enable connecting to a service at a
            remote site, the local listener and the remote connector
            must have matching routing keys.
          links:
            - name: Routing key concept
              url: /concepts/routing-key.html
        - name: host
          description: |
            The hostname or IP address of the local listener.  Clients
            at this site use the listener host and port to
            establish connections to the remote service.
        - name: port
          description: |
            The port of the local listener.  Clients at this site use
            the listener host and port to establish connections to
            the remote service.
        - name: tlsCredentials
          description: |
            The name of a Kubernetes secret containing TLS
            credentials.  The secret contains the trusted server
            certificate (typically a CA).

            It can optionally include a client certificate and key for
            mutual TLS.

            This option is used when setting up router-to-server TLS
            encryption.
          links:
            - name: Site-scoped TLS
              url: "" # XXX
        - name: type
          default: tcp
          description: |
            The listener type.
    status:
      inherit_properties: [status/*]
groups:
  - name: Site configuration
    resources:
      - Site
  - name: Site linking
    resources:
      - Link
      - AccessGrant
      - AccessToken
  - name: Service exposure
    resources:
      - Connector
      - Listener
