site:
  resource-kind: ConfigMap
  resource-name: skupper-site
  type-label: "skupper.io/type: site"
  description: |
    A [site][site] is a place where components of your application are
    running.  Sites are linked to form application
    [networks](terminology.md#networks).

    There can be only one `skupper-site` definition per namespace.

    [site]: teminology.md#site
  examples:
    yaml: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-site
        namespace: west
        labels:
          skupper.io/type: site
      data:
        name: west
        ingress: loadbalancer
    cli: |
      # skupper site init <options>
      $ skupper site init --name west --ingress loadbalancer
  groups:
    main:
      settings:
        name:
          type: string
          description: |
            A name of your choice for the Skupper site.  This name is
            displayed in the console and CLI output.
        ingress:
          default: |
            `route` if the environment is OpenShift, otherwise
            `loadbalancer`
          type: string
          choices: [route, loadbalancer, nodeport, nginx-ingress-v1, contour-http-proxy, ingress, none]
          description: |
            The method for providing access to this site from outside
            the cluster.  Cluster ingress enables a site to accept
            incoming [links](terminology.md#link).

            <!-- XXX enumerate -->
        # ingress-host:
        #   type: string
        #   description: |
        #     The hostname or alias by which the ingress route or proxy
        #     can be reached.

        #     Host through which node is accessible when using nodeport as ingress.

        #     XXX Are both of these correct?
        # load-balancer-ip:
        #   description: |
        #     The load balancer IP address to be used for cluster ingress.
connector:
  extends: service-binding
  resource-kind: ConfigMap
  resource-name: skupper-connector-<qualifier>
  type-label: "skupper.io/type: connector"
  description: |
    A [connector][connector] binds local servers to listeners in
    remote sites.

    Each namespace can contain multiple connector definitions.

    [connector]: terminology.md#connector
  examples:
    yaml: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-connector-backend
        namespace: east
        labels:
          skupper.io/type: connector
      data:
        routing-key: backend:8080
        port: 8080
        selector: app=backend
    cli: |
      # skupper connector create <routing-key> <workload>
      $ skupper connector create backend:8080 deployment/backend
  groups:
    main:
      settings:
        selector:
          type: string
          description: |
            A Kubernetes [label selector][selector] for identifying
            server pods.

            [selector]: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        host:
          type: string
          description: |
            The hostname or IP address of the server.
        port:
          required: true
          type: integer
          description: |
            The port number of the server listener.
        tls-credentials:
          type: string
          default: "*None*"
          description: |
            The name of a Kubernetes secret containing TLS
            credentials.  The secret contains the trusted server
            certificate (typically a CA certificate).

            It can optionally include a client certificate and key for
            mutual TLS.
listener:
  extends: service-binding
  resource-kind: ConfigMap
  resource-name: skupper-listener-<qualifier>
  type-label: "skupper.io/type: listener"
  description: |
    A [listener][listener] is a local connection endpoint bound to
    services in remote sites.

    Each namespace can contain multiple listener definitions.

    [listener]: terminology.md#listener
  examples:
    yaml: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-listener-backend
        namespace: west
        labels:
          skupper.io/type: listener
      data:
        routing-key: backend:8080
        host: backend
        port: 8080
    cli: |
      # skupper listener create <routing-key> <options>
      $ skupper listener create backend:8080
      # skupper listener create abc123 --host backend --port 8080
  groups:
    main:
      settings:
        host:
          required: true
          type: string
          description: |
            The hostname or IP address of the local listener.  Clients
            at this site use the listener host and port to
            establish connections to the remote service.
        port:
          required: true
          type: integer
          description: |
            The port of the local listener.  Clients at this site use
            the listener host and port to establish connections to
            the remote service.
        tls-credentials:
          type: string
          default: "*None*"
          description: |
            The name of a Kubernetes secret containing TLS
            credentials.  The secret contains the server certificate
            and key.

            It can optionally include a client certificate for mutual
            TLS.
service-binding:
  hidden: true
  groups:
    main:
      settings:
        routing-key:
          required: true
          type: string
          description: |
            The identifier used to route traffic from listeners to
            connectors.  To connect to a service at a remote site, the
            listener and connector must have matching routing keys.
    # advanced:
    #   title: Advanced settings
    #   settings:
    #     bridge-image:
    #       type: string
    #       description: |
    #         The container image to use for a protocol bridge running
    #         external to the Skupper router.
console:
  resource-kind: ConfigMap
  resource-name: skupper-console
  type-label: "skupper.io/type: console"
  description: |
    A web interface for viewing the application network and monitoring
    application traffic.

    There can be only one `skupper-console` definition per namespace.
  examples:
    yaml: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: skupper-console
        namespace: west
        labels:
          skupper.io/type: console
      data:
        ingress: loadbalancer
        auth: unsecured
    cli: |
      # skupper console init <options>
      $ skupper console init --ingress loadbalancer --auth unsecured
  groups:
    main:
      settings:
        ingress:
          default: |
            `route` if the environment is OpenShift, otherwise
            `loadbalancer`
          type: string
          choices: [route, loadbalancer, nodeport, nginx-ingress-v1, contour-http-proxy, ingress, none]
          description: |
            The method for providing access to the console from outside
            the cluster.

            <!-- See site ingress for the enumeration XXX -->
        auth:
          type: string
          choices: [internal, openshift, unsecured]
          description: |
            The user authentication mode for the console.

            `internal` - Use Skupper's built-in authentication.  See
            the `users` option.

            `openshift` - Use OpenShift authentication, so that users
            who have permission to log into OpenShift and view the
            namespace (project) can view the console.

            `unsecured` - No authentication.  Anyone with the URL can
            view the console.
        users:
          default: skupper-console-users
          type: string
          description: |
            The name of the Kubernetes secret containing the console
            users and passwords for the `internal` authentication
            mode.

            By default, a secret named `skupper-console-users` is
            generated with user `admin` and a random password.

            <!-- You can query the generated password XXX -->
